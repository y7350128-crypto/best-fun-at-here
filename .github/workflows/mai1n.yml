name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Disable Password Complexity and Allow Blank Passwords
        run: |
          secedit /export /cfg C:\secpol.cfg
          (Get-Content C:\secpol.cfg).replace("PasswordComplexity = 1", "PasswordComplexity = 0") | Out-File C:\secpol.cfg
          (Get-Content C:\secpol.cfg).replace("MinimumPasswordLength = 7", "MinimumPasswordLength = 0") | Out-File C:\secpol.cfg
          secedit /configure /db c:\windows\security\local.sdb /cfg C:\secpol.cfg /areas SECURITYPOLICY
          Remove-Item -Force C:\secpol.cfg -Confirm:$false
          
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' -Name "LimitBlankPasswordUse" -Value 0 -Force
          
          Write-Host "Disabled password complexity"

      - name: Install RDP Wrapper for Multiple Sessions
        run: |
          Write-Host "Installing RDP Wrapper..."
          
          $url = "https://github.com/stascorp/rdpwrap/releases/download/v1.6.2/RDPWrap-v1.6.2.zip"
          $output = "$env:TEMP\RDPWrap.zip"
          
          try {
              Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
              Expand-Archive -Path $output -DestinationPath "$env:TEMP\RDPWrap" -Force
              
              cd "$env:TEMP\RDPWrap"
              cmd /c install.bat
              Start-Sleep -Seconds 5
              
              $iniUrl = "https://raw.githubusercontent.com/sebaxakerhtc/rdpwrap.ini/master/rdpwrap.ini"
              $iniPath = "C:\Program Files\RDP Wrapper\rdpwrap.ini"
              Invoke-WebRequest -Uri $iniUrl -OutFile $iniPath -UseBasicParsing
              
              Restart-Service termservice -Force
              Write-Host "RDP Wrapper installed!"
          }
          catch {
              Write-Warning "RDP Wrapper failed"
          }

      - name: Download User Template from Google Drive
        run: |
          Write-Host "Downloading user template from Google Drive..."
          
          # First, make the folder publicly accessible ZIP
          # Use direct download link format
          $folderId = "18lF5qxqffc6n54-TWfeH8G7NMnPCZMj7"
          
          # Google Drive folder download requires special handling
          # We'll use curl which is built into Windows
          $downloadPath = "$env:TEMP\UserTemplate.zip"
          
          # Try direct download (you need to share folder and get direct zip link)
          try {
              # Alternative: Use Google Drive API or create a ZIP of the folder and share that ZIP file
              Write-Host "Note: Google Drive folders cannot be directly downloaded."
              Write-Host "Please create a ZIP file of your folder and share it, then use that file ID."
              Write-Host "For now, creating empty template structure..."
              
              # Create basic folder structure as fallback
              $templatePath = "$env:TEMP\UserTemplate"
              New-Item -Path $templatePath -ItemType Directory -Force | Out-Null
              New-Item -Path "$templatePath\Desktop" -ItemType Directory -Force | Out-Null
              New-Item -Path "$templatePath\Documents" -ItemType Directory -Force | Out-Null
              New-Item -Path "$templatePath\Downloads" -ItemType Directory -Force | Out-Null
              
              Write-Host "Created basic template structure"
          }
          catch {
              Write-Warning "Download failed: $($_.Exception.Message)"
          }

      - name: Create 10 Local Users
        run: |
          Write-Host "Creating 10 users..."
          
          for ($i = 1; $i -le 10; $i++) {
              $username = "User$i"
              
              try {
                  net user $username /add /passwordreq:no /expires:never /active:yes
                  net localgroup "Remote Desktop Users" $username /add
                  net localgroup "Administrators" $username /add
                  
                  Write-Host "Created: $username"
              }
              catch {
                  Write-Warning "Failed: $username"
              }
          }

      - name: Create User Profiles with Template
        run: |
          Write-Host "Creating user profiles..."
          
          $templatePath = "$env:TEMP\UserTemplate"
          $usersPath = "C:\Users"
          
          for ($i = 1; $i -le 10; $i++) {
              $username = "User$i"
              $userProfilePath = "$usersPath\$username"
              
              try {
                  # Create profile folder
                  New-Item -Path $userProfilePath -ItemType Directory -Force | Out-Null
                  
                  # Create standard Windows user folders
                  @("Desktop", "Documents", "Downloads", "Pictures", "Music", "Videos", "AppData") | ForEach-Object {
                      New-Item -Path "$userProfilePath\$_" -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null
                  }
                  
                  # Copy template if exists
                  if (Test-Path $templatePath) {
                      Copy-Item -Path "$templatePath\*" -Destination $userProfilePath -Recurse -Force -ErrorAction Continue
                  }
                  
                  # Set permissions
                  $acl = Get-Acl $userProfilePath
                  $userAccount = New-Object System.Security.Principal.NTAccount($username)
                  $acl.SetOwner($userAccount)
                  $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($username, "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
                  $acl.AddAccessRule($accessRule)
                  Set-Acl -Path $userProfilePath -AclObject $acl -ErrorAction Continue
                  
                  Write-Host "Setup complete: $username"
              }
              catch {
                  Write-Warning "Error: $username"
              }
          }

      - name: Grant Remote Desktop Rights
        run: |
          secedit /export /cfg C:\secpol.cfg
          $content = Get-Content C:\secpol.cfg
          
          $newContent = @()
          foreach ($line in $content) {
              if ($line -like "SeRemoteInteractiveLogonRight*") {
                  $users = ""
                  for ($i = 1; $i -le 10; $i++) {
                      $users += ",User$i"
                  }
                  $line = $line + $users
              }
              $newContent += $line
          }
          
          $newContent | Out-File C:\secpol.cfg
          secedit /configure /db c:\windows\security\local.sdb /cfg C:\secpol.cfg /areas USER_RIGHTS
          Remove-Item -Force C:\secpol.cfg -Confirm:$false

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned"
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP
        run: |
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "RDP failed"
              exit 1
          }

      - name: Maintain Connection
        run: |
          Write-Host "`n========================================="
          Write-Host "RDP SERVER READY"
          Write-Host "========================================="
          Write-Host "IP: $env:TAILSCALE_IP"
          Write-Host "Users: User1-User10"
          Write-Host "Password: NONE (leave blank)"
          Write-Host ""
          Write-Host "IMPORTANT: To use custom template:"
          Write-Host "1. ZIP your folder contents"
          Write-Host "2. Upload ZIP to Google Drive"
          Write-Host "3. Share ZIP file publicly"
          Write-Host "4. Use the ZIP file ID in workflow"
          Write-Host "========================================`n"
          
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active"
              Start-Sleep -Seconds 300
          }
