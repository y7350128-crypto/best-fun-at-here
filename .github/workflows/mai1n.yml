name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Disable Password Complexity and Allow Blank Passwords
        run: |
          secedit /export /cfg C:\secpol.cfg
          (Get-Content C:\secpol.cfg).replace("PasswordComplexity = 1", "PasswordComplexity = 0") | Out-File C:\secpol.cfg
          (Get-Content C:\secpol.cfg).replace("MinimumPasswordLength = 7", "MinimumPasswordLength = 0") | Out-File C:\secpol.cfg
          secedit /configure /db c:\windows\security\local.sdb /cfg C:\secpol.cfg /areas SECURITYPOLICY
          Remove-Item -Force C:\secpol.cfg -Confirm:$false
          
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' -Name "LimitBlankPasswordUse" -Value 0 -Force
          
          Write-Host "Disabled password complexity and enabled blank passwords"

      - name: Install RDP Wrapper for Multiple Sessions
        run: |
          Write-Host "Installing RDP Wrapper to enable multiple RDP sessions..."
          
          $url = "https://github.com/stascorp/rdpwrap/releases/download/v1.6.2/RDPWrap-v1.6.2.zip"
          $output = "$env:TEMP\RDPWrap.zip"
          
          try {
              Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
              Expand-Archive -Path $output -DestinationPath "$env:TEMP\RDPWrap" -Force
              
              cd "$env:TEMP\RDPWrap"
              
              # Run install.bat
              cmd /c install.bat
              
              Start-Sleep -Seconds 5
              
              # Update rdpwrap.ini for latest Windows version
              $iniUrl = "https://raw.githubusercontent.com/sebaxakerhtc/rdpwrap.ini/master/rdpwrap.ini"
              $iniPath = "C:\Program Files\RDP Wrapper\rdpwrap.ini"
              Invoke-WebRequest -Uri $iniUrl -OutFile $iniPath -UseBasicParsing
              
              # Restart RDP Wrapper service
              Restart-Service termservice -Force
              
              Write-Host "RDP Wrapper installed successfully!"
              Write-Host "Multiple concurrent RDP sessions are now enabled!"
          }
          catch {
              Write-Warning "RDP Wrapper installation failed: $($_.Exception.Message)"
              Write-Host "Continuing without RDP Wrapper..."
          }

      - name: Create 10 Local Users with No Password
        run: |
          Write-Host "Creating 10 local user accounts with no password..."
          
          for ($i = 1; $i -le 10; $i++) {
              $username = "User$i"
              
              try {
                  net user $username /add /passwordreq:no /expires:never /active:yes
                  net localgroup "Remote Desktop Users" $username /add
                  net localgroup "Administrators" $username /add
                  
                  Write-Host "Created user: $username (no password)"
              }
              catch {
                  Write-Warning "Failed to create ${username}: $($_.Exception.Message)"
              }
          }
          
          Write-Host "`nAll 10 users created successfully!"

      - name: Grant Remote Desktop Logon Rights
        run: |
          Write-Host "Granting 'Allow log on through Remote Desktop Services' right..."
          
          secedit /export /cfg C:\secpol.cfg
          
          $content = Get-Content C:\secpol.cfg
          
          $newContent = @()
          foreach ($line in $content) {
              if ($line -like "SeRemoteInteractiveLogonRight*") {
                  $users = ""
                  for ($i = 1; $i -le 10; $i++) {
                      $users += ",User$i"
                  }
                  $line = $line + $users
              }
              $newContent += $line
          }
          
          $newContent | Out-File C:\secpol.cfg
          
          secedit /configure /db c:\windows\security\local.sdb /cfg C:\secpol.cfg /areas USER_RIGHTS
          
          Remove-Item -Force C:\secpol.cfg -Confirm:$false
          
          Write-Host "Remote Desktop logon rights granted to all users!"

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n========================================="
          Write-Host "RDP SERVER READY - MULTIPLE SESSIONS ENABLED"
          Write-Host "========================================="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Available Users:"
          Write-Host "  User1, User2, User3, User4, User5"
          Write-Host "  User6, User7, User8, User9, User10"
          Write-Host ""
          Write-Host "Password: NONE (leave blank)"
          Write-Host ""
          Write-Host "IMPORTANT: RDP Wrapper installed!"
          Write-Host "You can now connect MULTIPLE users simultaneously."
          Write-Host "Open separate RDP windows for each user."
          Write-Host "========================================`n"
          
          while ($true) {
              Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] RDP Active - Multiple sessions supported"
              Start-Sleep -Seconds 300
          }
