name: RDP-Test-Single-User

on:
  workflow_dispatch:

jobs:
  rdp-1:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Configure RDP
        run: |
          Write-Host "Configuring RDP settings..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          Write-Host "✓ RDP configured"

      - name: Disable Password Requirements
        run: |
          Write-Host "Disabling password requirements..."
          secedit /export /cfg C:\secpol.cfg
          (Get-Content C:\secpol.cfg).replace("PasswordComplexity = 1", "PasswordComplexity = 0") | Out-File C:\secpol.cfg
          (Get-Content C:\secpol.cfg).replace("MinimumPasswordLength = 7", "MinimumPasswordLength = 0") | Out-File C:\secpol.cfg
          secedit /configure /db c:\windows\security\local.sdb /cfg C:\secpol.cfg /areas SECURITYPOLICY
          Remove-Item C:\secpol.cfg -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' -Name "LimitBlankPasswordUse" -Value 0 -Force
          Write-Host "✓ Password requirements disabled"

      - name: Install RDP Wrapper
        run: |
          Write-Host "Installing RDP Wrapper..."
          $url = "https://github.com/stascorp/rdpwrap/releases/download/v1.6.2/RDPWrap-v1.6.2.zip"
          Invoke-WebRequest -Uri $url -OutFile "$env:TEMP\RDPWrap.zip" -UseBasicParsing
          Expand-Archive -Path "$env:TEMP\RDPWrap.zip" -DestinationPath "$env:TEMP\RDPWrap" -Force
          cd "$env:TEMP\RDPWrap"
          cmd /c install.bat
          Start-Sleep -Seconds 5
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/sebaxakerhtc/rdpwrap.ini/master/rdpwrap.ini" -OutFile "C:\Program Files\RDP Wrapper\rdpwrap.ini" -UseBasicParsing
          Restart-Service termservice -Force
          Write-Host "✓ RDP Wrapper installed"

      - name: Create Test User
        run: |
          Write-Host "Creating test user: TestUser1"
          net user TestUser1 /add /passwordreq:no /expires:never /active:yes
          net localgroup "Remote Desktop Users" TestUser1 /add
          net localgroup "Administrators" TestUser1 /add
          Write-Host "✓ Test user created: TestUser1 (no password)"

      - name: Grant RDP Rights to Test User
        run: |
          secedit /export /cfg C:\secpol.cfg
          $content = Get-Content C:\secpol.cfg
          $newContent = @()
          foreach ($line in $content) {
              if ($line -like "SeRemoteInteractiveLogonRight*") {
                  $line = $line + ",TestUser1"
              }
              $newContent += $line
          }
          $newContent | Out-File C:\secpol.cfg
          secedit /configure /db c:\windows\security\local.sdb /cfg C:\secpol.cfg /areas USER_RIGHTS
          Remove-Item C:\secpol.cfg -Force
          Write-Host "✓ RDP rights granted to TestUser1"

      - name: Install Tailscale
        run: |
          Write-Host "Downloading Tailscale installer..."
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi" -OutFile "$env:TEMP\tailscale.msi"
          
          Write-Host "Installing Tailscale..."
          Start-Process msiexec.exe -ArgumentList "/i", "`"$env:TEMP\tailscale.msi`"", "/quiet", "/norestart" -Wait
          Write-Host "✓ Tailscale installed"

      - name: Wait for Tailscale Service
        run: |
          Write-Host "Waiting for Tailscale service to be ready..."
          $maxAttempts = 30
          $attempt = 0
          
          while ($attempt -lt $maxAttempts) {
              $service = Get-Service -Name "Tailscale" -ErrorAction SilentlyContinue
              if ($service -and $service.Status -eq "Running") {
                  Write-Host "✓ Tailscale service is running"
                  break
              }
              $attempt++
              Write-Host "Waiting for service... ($attempt/$maxAttempts)"
              Start-Sleep -Seconds 2
          }
          
          if ($attempt -eq $maxAttempts) {
              Write-Host "ERROR: Tailscale service did not start"
              exit 1
          }

      - name: Connect to Tailscale
        run: |
          Write-Host "Connecting to Tailscale network..."
          $tsPath = "$env:ProgramFiles\Tailscale\tailscale.exe"
          
          if (-not (Test-Path $tsPath)) {
              Write-Host "ERROR: Tailscale executable not found at $tsPath"
              exit 1
          }
          
          Write-Host "Running: tailscale up..."
          & $tsPath up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=rdp-test-$env:GITHUB_RUN_ID --accept-routes --accept-dns=false
          
          Write-Host "✓ Connection command executed"

      - name: Wait for Tailscale IP (Critical Step)
        run: |
          Write-Host "Waiting for Tailscale to establish connection..."
          Write-Host "This may take up to 3 minutes (DERP relay coordination)..."
          
          $tsPath = "$env:ProgramFiles\Tailscale\tailscale.exe"
          $maxAttempts = 36  # 3 minutes (36 * 5 seconds)
          $attempt = 0
          $tsIP = $null
          
          while ($attempt -lt $maxAttempts) {
              Start-Sleep -Seconds 5
              $attempt++
              
              try {
                  $tsIP = & $tsPath ip -4 2>&1
                  
                  if ($tsIP -and $tsIP -match '^\d+\.\d+\.\d+\.\d+$') {
                      Write-Host "✓ Tailscale IP obtained: $tsIP"
                      echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
                      
                      # Verify connectivity by checking status
                      Write-Host "Verifying Tailscale status..."
                      & $tsPath status
                      
                      break
                  } else {
                      if ($attempt % 6 -eq 0) {  # Log every 30 seconds
                          Write-Host "Still waiting... (${attempt}0 seconds elapsed)"
                      }
                  }
              } catch {
                  if ($attempt % 6 -eq 0) {
                      Write-Host "Still initializing... (${attempt}0 seconds elapsed)"
                  }
              }
          }
          
          if (-not $tsIP -or $tsIP -notmatch '^\d+\.\d+\.\d+\.\d+$') {
              Write-Host "ERROR: Failed to obtain Tailscale IP after 3 minutes"
              Write-Host "Running diagnostics..."
              & $tsPath status
              exit 1
          }

      - name: Test RDP Port
        run: |
          Write-Host "Testing if RDP port 3389 is listening..."
          $listener = Get-NetTCPConnection -LocalPort 3389 -State Listen -ErrorAction SilentlyContinue
          if ($listener) {
              Write-Host "✓ RDP is listening on port 3389"
          } else {
              Write-Host "⚠ Warning: RDP might not be listening properly"
          }

      - name: Display Connection Info
        run: |
          Write-Host ""
          Write-Host "========================================="
          Write-Host "    RDP SERVER READY FOR TESTING"
          Write-Host "========================================="
          Write-Host ""
          Write-Host "CONNECTION DETAILS:"
          Write-Host "  Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "  Username: TestUser1"
          Write-Host "  Password: (none - leave blank)"
          Write-Host "  Port: 3389 (default RDP)"
          Write-Host ""
          Write-Host "HOW TO CONNECT:"
          Write-Host "  1. Make sure Tailscale is running on your device"
          Write-Host "  2. Open Remote Desktop Connection"
          Write-Host "  3. Enter: $env:TAILSCALE_IP"
          Write-Host "  4. Username: TestUser1"
          Write-Host "  5. Password: Leave blank / press Enter"
          Write-Host ""
          Write-Host "TROUBLESHOOTING:"
          Write-Host "  - Can you ping $env:TAILSCALE_IP from terminal?"
          Write-Host "  - Is Tailscale running on your local machine?"
          Write-Host "  - Check Tailscale admin console for this device"
          Write-Host ""
          Write-Host "========================================="
          Write-Host ""
          
          # Show Tailscale status for debugging
          Write-Host "Tailscale Status:"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" status

      - name: Keep Alive
        run: |
          Write-Host "Server will stay alive for 6 hours..."
          Write-Host "Press Ctrl+C in GitHub Actions UI to stop early"
          Write-Host ""
          
          $endTime = (Get-Date).AddHours(6)
          while ((Get-Date) -lt $endTime) {
              $remaining = ($endTime - (Get-Date)).ToString("hh\:mm\:ss")
              Write-Host "Time remaining: $remaining"
              Start-Sleep -Seconds 300  # Update every 5 minutes
          }
          
          Write-Host "6 hour limit reached. Shutting down..."
