name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Disable Password Complexity and Allow Blank Passwords
        run: |
          secedit /export /cfg C:\secpol.cfg
          (Get-Content C:\secpol.cfg).replace("PasswordComplexity = 1", "PasswordComplexity = 0") | Out-File C:\secpol.cfg
          (Get-Content C:\secpol.cfg).replace("MinimumPasswordLength = 7", "MinimumPasswordLength = 0") | Out-File C:\secpol.cfg
          secedit /configure /db c:\windows\security\local.sdb /cfg C:\secpol.cfg /areas SECURITYPOLICY
          Remove-Item -Force C:\secpol.cfg -Confirm:$false
          
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' -Name "LimitBlankPasswordUse" -Value 0 -Force
          
          Write-Host "Disabled password complexity and enabled blank passwords"

      - name: Install RDP Wrapper for Multiple Sessions
        run: |
          Write-Host "Installing RDP Wrapper to enable multiple RDP sessions..."
          
          $url = "https://github.com/stascorp/rdpwrap/releases/download/v1.6.2/RDPWrap-v1.6.2.zip"
          $output = "$env:TEMP\RDPWrap.zip"
          
          try {
              Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
              Expand-Archive -Path $output -DestinationPath "$env:TEMP\RDPWrap" -Force
              
              cd "$env:TEMP\RDPWrap"
              cmd /c install.bat
              Start-Sleep -Seconds 5
              
              $iniUrl = "https://raw.githubusercontent.com/sebaxakerhtc/rdpwrap.ini/master/rdpwrap.ini"
              $iniPath = "C:\Program Files\RDP Wrapper\rdpwrap.ini"
              Invoke-WebRequest -Uri $iniUrl -OutFile $iniPath -UseBasicParsing
              
              Restart-Service termservice -Force
              Write-Host "RDP Wrapper installed successfully!"
          }
          catch {
              Write-Warning "RDP Wrapper installation failed: $($_.Exception.Message)"
          }

      - name: Install 7-Zip and Download RAR Template
        run: |
          Write-Host "Installing 7-Zip..."
          choco install 7zip -y
          
          Write-Host "`nDownloading RAR template from Google Drive..."
          
          $fileId = "1uw9Z-0XJWuQHZAXuGNKtPD6322V7r0iP"
          $rarPath = "$env:TEMP\UserTemplate.rar"
          $extractPath = "$env:TEMP\UserTemplate"
          
          # Google Drive download with confirmation token handling
          $url1 = "https://drive.google.com/uc?export=download&id=$fileId"
          
          try {
              # First request to get cookies and check for confirmation
              $response = Invoke-WebRequest -Uri $url1 -SessionVariable session -UseBasicParsing
              
              # Check if we got a confirmation page (for large files)
              if ($response.Content -match 'download_warning.*?confirm=([^&"]+)') {
                  $confirm = $matches[1]
                  $url2 = "https://drive.google.com/uc?export=download&id=$fileId&confirm=$confirm"
                  Write-Host "Using confirmation token: $confirm"
                  Invoke-WebRequest -Uri $url2 -WebSession $session -OutFile $rarPath -UseBasicParsing
              }
              elseif ($response.Content -match 'id="download-form".*?action="([^"]+)"') {
                  $downloadUrl = $matches[1]
                  $downloadUrl = $downloadUrl.Replace("&amp;", "&")
                  Write-Host "Using download form URL"
                  Invoke-WebRequest -Uri "https://drive.google.com$downloadUrl" -WebSession $session -OutFile $rarPath -UseBasicParsing
              }
              else {
                  # Direct download (small files)
                  Write-Host "Using direct download"
                  Invoke-WebRequest -Uri $url1 -OutFile $rarPath -UseBasicParsing
              }
              
              # Check file size
              $fileSize = (Get-Item $rarPath).Length
              Write-Host "Downloaded file size: $fileSize bytes ($([math]::Round($fileSize/1MB, 2)) MB)"
              
              if ($fileSize -lt 10000) {
                  Write-Error "Downloaded file is too small ($fileSize bytes). This is an HTML redirect page."
                  Write-Host "`nThe Google Drive file cannot be downloaded directly."
                  Write-Host "Please upload your RAR file to GitHub Releases or Dropbox instead."
                  Write-Host "`nFor now, creating empty template structure..."
                  
                  # Create basic folder structure as fallback
                  New-Item -Path $extractPath -ItemType Directory -Force | Out-Null
                  $folders = @("AppData", "Desktop", "Documents", "Downloads", "Music", "Pictures", "Videos", "Contacts", "Links", "Saved Games", "Searches", "Favorites")
                  foreach ($folder in $folders) {
                      New-Item -Path "$extractPath\$folder" -ItemType Directory -Force | Out-Null
                  }
                  Write-Host "Created basic folder structure"
              }
              else {
                  # Extract RAR using 7-Zip
                  New-Item -Path $extractPath -ItemType Directory -Force | Out-Null
                  
                  Write-Host "Extracting RAR file..."
                  $extractResult = & "C:\Program Files\7-Zip\7z.exe" x $rarPath -o"$extractPath" -y
                  
                  if ($LASTEXITCODE -ne 0) {
                      Write-Error "7-Zip extraction failed with exit code $LASTEXITCODE"
                      Write-Host "Creating basic folder structure instead..."
                      $folders = @("AppData", "Desktop", "Documents", "Downloads", "Music", "Pictures", "Videos", "Contacts", "Links", "Saved Games", "Searches", "Favorites")
                      foreach ($folder in $folders) {
                          New-Item -Path "$extractPath\$folder" -ItemType Directory -Force | Out-Null
                      }
                  }
                  else {
                      Write-Host "Extracted RAR successfully!"
                  }
              }
              
              Write-Host "`nExtracted contents:"
              Get-ChildItem -Path $extractPath | ForEach-Object {
                  Write-Host "  - $($_.Name)"
              }
          }
          catch {
              Write-Warning "Download/Extract failed: $($_.Exception.Message)"
              Write-Host "Creating basic folder structure..."
              New-Item -Path $extractPath -ItemType Directory -Force | Out-Null
              $folders = @("AppData", "Desktop", "Documents", "Downloads", "Music", "Pictures", "Videos", "Contacts", "Links", "Saved Games", "Searches", "Favorites")
              foreach ($folder in $folders) {
                  New-Item -Path "$extractPath\$folder" -ItemType Directory -Force | Out-Null
              }
          }

      - name: Create 10 Local Users with No Password
        run: |
          Write-Host "Creating 10 local users..."
          
          for ($i = 1; $i -le 10; $i++) {
              $username = "User$i"
              
              try {
                  net user $username /add /passwordreq:no /expires:never /active:yes
                  net localgroup "Remote Desktop Users" $username /add
                  net localgroup "Administrators" $username /add
                  
                  Write-Host "Created user: $username"
              }
              catch {
                  Write-Warning "Failed to create $username"
              }
          }
          
          Write-Host "All 10 users created successfully!"

      - name: Create User Profiles and Apply Custom Template
        run: |
          Write-Host "Creating user profiles and applying custom template..."
          
          $extractPath = "$env:TEMP\UserTemplate"
          $usersPath = "C:\Users"
          
          # Find the actual template folder (RAR might extract to subfolder)
          $templateFolder = Get-ChildItem -Path $extractPath -Directory | Select-Object -First 1
          if ($templateFolder) {
              $templatePath = $templateFolder.FullName
              Write-Host "Using template from: $templatePath"
          } else {
              $templatePath = $extractPath
              Write-Host "Using template from: $templatePath"
          }
          
          # Show what will be copied
          Write-Host "`nTemplate contents to copy:"
          Get-ChildItem -Path $templatePath -Force | ForEach-Object {
              if ($_.PSIsContainer) {
                  Write-Host "  - $($_.Name) [Folder]"
              } else {
                  Write-Host "  - $($_.Name) [File - $($_.Length) bytes]"
              }
          }
          
          for ($i = 1; $i -le 10; $i++) {
              $username = "User$i"
              $userProfilePath = "$usersPath\$username"
              
              Write-Host "`n--- Setting up $username ---"
              
              try {
                  # Create user profile directory
                  New-Item -Path $userProfilePath -ItemType Directory -Force | Out-Null
                  Write-Host "Created profile folder: $userProfilePath"
                  
                  # Copy all folders from template
                  Get-ChildItem -Path $templatePath -Directory -Force | ForEach-Object {
                      $destFolder = Join-Path $userProfilePath $_.Name
                      try {
                          Copy-Item -Path $_.FullName -Destination $destFolder -Recurse -Force -ErrorAction Continue
                          Write-Host "  Copied folder: $($_.Name)"
                      }
                      catch {
                          Write-Warning "  Failed to copy folder $($_.Name): $($_.Exception.Message)"
                      }
                  }
                  
                  # Copy all files from template (like ntuser.dat)
                  Get-ChildItem -Path $templatePath -File -Force | ForEach-Object {
                      try {
                          Copy-Item -Path $_.FullName -Destination $userProfilePath -Force -ErrorAction Continue
                          Write-Host "  Copied file: $($_.Name)"
                      }
                      catch {
                          Write-Warning "  Failed to copy file $($_.Name): $($_.Exception.Message)"
                      }
                  }
                  
                  # Set ownership and permissions using icacls
                  icacls $userProfilePath /grant "${username}:(OI)(CI)F" /T /C /Q | Out-Null
                  Write-Host "  Set permissions for $username"
                  
                  # Verify what was copied
                  $itemCount = (Get-ChildItem -Path $userProfilePath -Force | Measure-Object).Count
                  Write-Host "  Total items in profile: $itemCount"
                  
              }
              catch {
                  Write-Error "Failed to setup profile for $username : $($_.Exception.Message)"
              }
          }
          
          Write-Host "`n=== All user profiles created with custom template ==="

      - name: Grant Remote Desktop Logon Rights
        run: |
          Write-Host "Granting Remote Desktop logon rights..."
          
          secedit /export /cfg C:\secpol.cfg
          $content = Get-Content C:\secpol.cfg
          
          $newContent = @()
          foreach ($line in $content) {
              if ($line -like "SeRemoteInteractiveLogonRight*") {
                  $users = ""
                  for ($i = 1; $i -le 10; $i++) {
                      $users += ",User$i"
                  }
                  $line = $line + $users
              }
              $newContent += $line
          }
          
          $newContent | Out-File C:\secpol.cfg
          secedit /configure /db c:\windows\security\local.sdb /cfg C:\secpol.cfg /areas USER_RIGHTS
          Remove-Item -Force C:\secpol.cfg -Confirm:$false
          
          Write-Host "Remote Desktop logon rights granted to all users!"

      - name: Install Tailscale
        run: |
          Write-Host "Installing Tailscale..."
          
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          
          Write-Host "Tailscale installed successfully!"

      - name: Establish Tailscale Connection
        run: |
          Write-Host "Connecting to Tailscale..."
          
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          
          Write-Host "Tailscale connected! IP: $tsIP"
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Verifying RDP accessibility..."
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity to RDP port successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n========================================="
          Write-Host "      RDP SERVER READY"
          Write-Host "========================================="
          Write-Host "IP Address: $env:TAILSCALE_IP"
          Write-Host "Available Users: User1, User2, User3, User4, User5,"
          Write-Host "                 User6, User7, User8, User9, User10"
          Write-Host "Password: NONE (leave blank, just press Enter)"
          Write-Host ""
          Write-Host "Features:"
          Write-Host "  - Multiple RDP sessions supported (RDP Wrapper)"
          Write-Host "  - Custom user profiles from Google Drive"
          Write-Host "  - All folders copied to each user"
          Write-Host "  - No password required"
          Write-Host ""
          Write-Host "NOTE: If RAR download failed, basic folder structure was created."
          Write-Host "To use custom template, upload RAR to GitHub Releases or Dropbox."
          Write-Host "========================================`n"
          
          while ($true) {
              Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] RDP Server Active - 10 users ready"
              Start-Sleep -Seconds 300
          }
