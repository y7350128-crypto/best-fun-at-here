name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Disable Password Complexity and Allow Blank Passwords
        run: |
          secedit /export /cfg C:\secpol.cfg
          (Get-Content C:\secpol.cfg).replace("PasswordComplexity = 1", "PasswordComplexity = 0") | Out-File C:\secpol.cfg
          (Get-Content C:\secpol.cfg).replace("MinimumPasswordLength = 7", "MinimumPasswordLength = 0") | Out-File C:\secpol.cfg
          secedit /configure /db c:\windows\security\local.sdb /cfg C:\secpol.cfg /areas SECURITYPOLICY
          Remove-Item -Force C:\secpol.cfg -Confirm:$false
          
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' -Name "LimitBlankPasswordUse" -Value 0 -Force
          
          Write-Host "Disabled password complexity and enabled blank passwords"

      - name: Install RDP Wrapper for Multiple Sessions
        run: |
          Write-Host "Installing RDP Wrapper..."
          
          $url = "https://github.com/stascorp/rdpwrap/releases/download/v1.6.2/RDPWrap-v1.6.2.zip"
          $output = "$env:TEMP\RDPWrap.zip"
          
          try {
              Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
              Expand-Archive -Path $output -DestinationPath "$env:TEMP\RDPWrap" -Force
              
              cd "$env:TEMP\RDPWrap"
              cmd /c install.bat
              Start-Sleep -Seconds 5
              
              $iniUrl = "https://raw.githubusercontent.com/sebaxakerhtc/rdpwrap.ini/master/rdpwrap.ini"
              $iniPath = "C:\Program Files\RDP Wrapper\rdpwrap.ini"
              Invoke-WebRequest -Uri $iniUrl -OutFile $iniPath -UseBasicParsing
              
              Restart-Service termservice -Force
              Write-Host "RDP Wrapper installed successfully!"
          }
          catch {
              Write-Warning "RDP Wrapper installation failed: $($_.Exception.Message)"
          }

      - name: Install Python and gdown
        run: |
          Write-Host "Installing Python..."
          choco install python -y --version=3.11.0
          
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          
          Write-Host "Installing gdown..."
          python -m pip install --upgrade pip
          pip install gdown
          
          Write-Host "Python and gdown installed!"

      - name: Download and Extract RAR from Google Drive
        run: |
          Write-Host "Downloading RAR from Google Drive..."
          
          $fileId = "1uw9Z-0XJWuQHZAXuGNKtPD6322V7r0iP"
          $rarPath = "$env:TEMP\UserTemplate.rar"
          $extractPath = "$env:TEMP\UserTemplate"
          
          gdown $fileId -O $rarPath
          
          if (Test-Path $rarPath) {
              $fileSize = (Get-Item $rarPath).Length
              Write-Host "Downloaded: $([math]::Round($fileSize/1MB, 2)) MB"
              
              if ($fileSize -gt 10000) {
                  Write-Host "Installing 7-Zip..."
                  choco install 7zip -y
                  
                  New-Item -Path $extractPath -ItemType Directory -Force | Out-Null
                  Write-Host "Extracting RAR..."
                  & "C:\Program Files\7-Zip\7z.exe" x $rarPath -o"$extractPath" -y
                  
                  Write-Host "`nExtracted contents:"
                  Get-ChildItem -Path $extractPath | ForEach-Object {
                      Write-Host "  - $($_.Name)"
                  }
              }
          }

      - name: Replace Windows Default User Profile
        run: |
          Write-Host "Replacing C:\Users\Default with custom template..."
          
          $extractPath = "$env:TEMP\UserTemplate"
          $defaultProfilePath = "C:\Users\Default"
          
          # Find Default folder - handle nested Default folders
          $defaultFolder = Get-ChildItem -Path $extractPath -Directory -Filter "Default" -Recurse | Select-Object -First 1
          
          if ($defaultFolder) {
              # If we found a Default folder, use its CONTENTS (not the folder itself)
              $templatePath = $defaultFolder.FullName
              Write-Host "Found Default folder, using contents from: $templatePath"
          } else {
              # No Default folder found, use first directory
              $firstFolder = Get-ChildItem -Path $extractPath -Directory | Select-Object -First 1
              if ($firstFolder) {
                  $templatePath = $firstFolder.FullName
                  Write-Host "No Default folder, using: $templatePath"
              } else {
                  $templatePath = $extractPath
                  Write-Host "Using extract path: $templatePath"
              }
          }
          
          # Show what's INSIDE the template folder
          Write-Host "`nContents INSIDE template folder:"
          Get-ChildItem -Path $templatePath -Force | Select-Object -First 30 | ForEach-Object {
              if ($_.PSIsContainer) {
                  Write-Host "  - $($_.Name) [Folder]"
              } else {
                  Write-Host "  - $($_.Name) [File]"
              }
          }
          
          # Simply delete and recreate Default folder (faster than takeown)
          Write-Host "`nRemoving old C:\Users\Default..."
          
          try {
              # Stop explorer to release locks
              Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
              
              # Delete old Default folder
              cmd /c "rmdir /s /q C:\Users\Default" 2>$null
              Start-Sleep -Seconds 2
              
              # Create new Default folder
              New-Item -Path $defaultProfilePath -ItemType Directory -Force | Out-Null
              Write-Host "Created new C:\Users\Default"
              
              # Copy custom template contents to Default folder using robocopy
              Write-Host "`nCopying template to C:\Users\Default..."
              robocopy $templatePath $defaultProfilePath /E /MT:16 /R:1 /W:1 /NFL /NDL /NP
              
              # Set proper permissions
              Write-Host "Setting permissions..."
              icacls $defaultProfilePath /setowner "SYSTEM" /T /C /Q | Out-Null
              icacls $defaultProfilePath /grant "SYSTEM:(OI)(CI)F" /T /C /Q | Out-Null
              icacls $defaultProfilePath /grant "Administrators:(OI)(CI)F" /T /C /Q | Out-Null
              
              Write-Host "`nC:\Users\Default replaced successfully!"
              Write-Host "All new users will get this custom profile on first login."
          }
          catch {
              Write-Warning "Error: $($_.Exception.Message)"
          }

      - name: Create 10 Local Users
        run: |
          Write-Host "Creating 10 users..."
          
          for ($i = 1; $i -le 10; $i++) {
              $username = "User$i"
              net user $username /add /passwordreq:no /expires:never /active:yes
              net localgroup "Remote Desktop Users" $username /add
              net localgroup "Administrators" $username /add
              Write-Host "Created: $username"
          }
          
          Write-Host "`nAll users created! They will get custom profile on first login."

      - name: Grant Remote Desktop Rights
        run: |
          secedit /export /cfg C:\secpol.cfg
          $content = Get-Content C:\secpol.cfg
          
          $newContent = @()
          foreach ($line in $content) {
              if ($line -like "SeRemoteInteractiveLogonRight*") {
                  $users = ""
                  for ($i = 1; $i -le 10; $i++) {
                      $users += ",User$i"
                  }
                  $line = $line + $users
              }
              $newContent += $line
          }
          
          $newContent | Out-File C:\secpol.cfg
          secedit /configure /db c:\windows\security\local.sdb /cfg C:\secpol.cfg /areas USER_RIGHTS
          Remove-Item -Force C:\secpol.cfg -Confirm:$false

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned"
              exit 1
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP
        run: |
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "RDP failed"
              exit 1
          }

      - name: Maintain Connection
        run: |
          Write-Host "`n========================================="
          Write-Host "      RDP SERVER READY"
          Write-Host "========================================="
          Write-Host "IP: $env:TAILSCALE_IP"
          Write-Host "Users: User1-User10"
          Write-Host "Password: NONE (blank)"
          Write-Host ""
          Write-Host "Custom Default profile installed!"
          Write-Host "Users get custom profile on first login!"
          Write-Host "========================================`n"
          
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active"
              Start-Sleep -Seconds 300
          }
